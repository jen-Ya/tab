require '~/gensym.tab'

# Wrapped in a anonymous function call to avoid polluting the environment
let dlet ((f _
	# Helper function for destructuring dictionaries
	# e. g. let ({ 'a' a ) (dict 'a' 42)
	fn .dlet-dict (keys value)
		if (is-empty keys) ()
			do # else
				let first-key (first keys)
				cond
					= first-key (symbol '..')
					# if spread operator, assign all remaining values to next key
					li
						qq
							let (unq (nth keys 1)) (unq value)
					# shorthand desctructing, e. g. let ({ a ) (dict 'a' 42)
					is-symbol first-key
					cons
						qq
							let (unq first-key) (get (unq value) (unq (str first-key)))
						.dlet-dict (slice keys 1) (qq (dissoc (unq value) (unq (str first-key))))
					# else assign first value to first key
					# and recurse with rest of keys and value
					else
					concat
						.dlet (nth keys 1) (qq (get (unq value) (unq first-key)))
						.dlet-dict (slice keys 2) (qq (dissoc (unq value) (unq first-key)))

	# Helper function for destructuring lists
	fn .dlet-list (keys value)
		cond
			# all keys and value assigned
			is-empty keys
			()

			# if spread operator, assign all remaining value to next key
			= (first keys) (symbol '..')
			li
				qq
					let (unq (nth keys 1)) (unq value)

			# else assign first value to first key
			# and recurse with rest of keys and value
			else
			concat
				.dlet (first keys) (qq
					first (unq value)
				)
				.dlet (rest keys) (qq (rest (unq value)))
	fn .dlet (key value)
		cond
			is-symbol key
			li
				qq (let (unq key) (unq value))

			is-nil key
			()

			and
				is-list key
				= (first key) (symbol '{')
			.dlet-dict (rest key) value

			is-list key
			.dlet-list key value

			else
			throw 'unexpeced key type'
	# top level macro
	# store evalation of value in a temporary variable
	macrof (key value) (do
		let tmp (gensym)
		let lets (.dlet key tmp)
		qq (do
			let (unq tmp) (unq value)
			..unq lets
		)
	)
))