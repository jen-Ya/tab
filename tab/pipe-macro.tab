require '~/reduce.tab' reduce
require '~/reverse.tab' reverse
# if we want to use macros in a pipe, we need to use a pipe-macro
# otherwise a pipe function is enough
macro pipem (.. value-and-funcs)
	reduce value-and-funcs (f (value next-func)
		li next-func value
	)

macro pipem-reversed (.. funcs-and-value)
	reduce (reverse funcs-and-value) (f (value next-func)
		li next-func value
	)

macro pipe-apply (value .. funcs)
	if (is-empty funcs)
		# then
		value
		# else
		do
			let func (first funcs)
			if (is-list func) (do
				let args (rest func)
				let func (first func)
				qq
					pipe-apply
						(unq func) (unq value) (..unq args)
						..unq (rest funcs)
			) (do #else
				qq
					pipe-apply
						(unq func) (unq value)
						..unq (rest funcs)
			)

macro pipe$ (value .. funcs)
	# replace all $ with parameter
	fn replace$ (args)
		map args (f arg
			cond
				= arg (symbol '$')
				value

				is-list arg
				replace$ arg

				true # else
				arg
		)
	if (is-empty funcs)
		# then
		value
		# else
		do
			let func (first funcs)
			if (is-list func) (do
				let args (rest func)
				let func (first func)
				qq
					pipe$
						(unq func) (..unq (replace$ args))
						..unq (rest funcs)
			) (do #else
				qq
					pipe$
						(unq func) (unq value)
						..unq (rest funcs)
			)